security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_default_users:
            memory:
                users:
                    '%env(resolve:DEFAULT_APP_USER)%': { password: '%env(resolve:DEFAULT_APP_PASSWORD)%', roles: [ 'ROLE_USER' ] }
        app_db_users:
            entity:
                class: App\Entity\User
                property: username
        all_users:
            chain:
                providers: [ app_default_users, app_db_users ]
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: all_users
            
            logout:
                path: app_logout
            
            form_login:
                login_path: app_login
                check_path: app_login
                enable_csrf: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    role_hierarchy:
        ROLE_SUPER_ADMIN: [ ROLE_ADMIN, ROLE_ADMIN_USER ]
        ROLE_ADMIN_USER: [ROLE_EDIT_USER, ROLE_CREATE_USER ]
        ROLE_EDIT_USER: [ ]
        ROLE_CREATE_USER: [ ]
        ROLE_ADMIN: [ ROLE_ADMIN_HOUSING, ROLE_ADMIN_FURNITURE, ROLE_ADMIN_SERVICE, ROLE_ADMIN_SUPPORTER, ROLE_CREATE_USER ]
        ROLE_ADMIN_HOUSING: [ ]
        ROLE_ADMIN_FURNITURE: [ ]
        ROLE_ADMIN_SERVICE: [ ]
        ROLE_ADMIN_SUPPORTER: [ ]
        ROLE_USER: [ ]
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
