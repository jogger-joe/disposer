security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_db_users:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_db_users
            login_throttling:
                max_attempts: 3
                interval: '30 minutes'

            logout:
                path: app_logout

            form_login:
                login_path: app_login
                check_path: app_login
                enable_csrf: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    role_hierarchy:
        ROLE_SUPER_ADMIN: [ ROLE_ADMIN, ROLE_ADMIN_USER ]
        ROLE_ADMIN_USER: [ ROLE_EDIT_USER, ROLE_CREATE_USER ]
        ROLE_EDIT_USER: [ ]
        ROLE_CREATE_USER: [ ]
        ROLE_ADMIN: [ ROLE_ADMIN_HOUSING, ROLE_ADMIN_FURNITURE, ROLE_ADMIN_SERVICE, ROLE_ADMIN_SUPPORTER, ROLE_CREATE_USER ]
        ROLE_ADMIN_HOUSING: [ ROLE_USER ]
        ROLE_ADMIN_FURNITURE: [ ROLE_USER ]
        ROLE_ADMIN_SERVICE: [ ROLE_USER ]
        ROLE_ADMIN_SUPPORTER: [ ROLE_USER ]
        ROLE_USER: [ ROLE_SUPPORTER ]
        ROLE_SUPPORTER: [ ROLE_GUEST ]
        ROLE_GUEST: [ ]
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin/dashboard/$, roles: ROLE_GUEST, methods: [ GET ] }
        - { path: ^/admin/supporter/accepted/$, roles: ROLE_USER, methods: [ GET ] }
        - { path: ^/admin/supporter/unaccepted/$, roles: ROLE_USER, methods: [ GET ] }
        - { path: ^/admin/supporter/edit, roles: ROLE_ADMIN_SUPPORTER, methods: [ GET,POST ] }
        - { path: ^/admin/supporter/new, roles: ROLE_ADMIN_SUPPORTER, methods: [ GET,POST ] }
        - { path: ^/admin/supporter/activate, roles: ROLE_ADMIN_SUPPORTER, methods: [ POST ] }
        - { path: ^/admin/housing/$, roles: [ ROLE_USER ], methods: [ GET ] }
        - { path: ^/admin/housing/maintained$, roles: [ ROLE_SUPPORTER ], methods: [ GET ] }
        - { path: ^/admin/housing/require-registration$, roles: [ ROLE_SUPPORTER ], methods: [ GET ] }
        - { path: ^/admin/housing/supporter/edit, roles: ROLE_SUPPORTER, methods: [ GET,POST ] }
        - { path: ^/admin/housing/edit, roles: ROLE_ADMIN_HOUSING, methods: [ GET,POST ] }
        - { path: ^/admin/housing/new, roles: ROLE_ADMIN_HOUSING, methods: [ GET,POST ] }
        - { path: ^/admin/furniture/$, roles: ROLE_USER, methods: [ GET ] }
        - { path: ^/admin/furniture/edit, roles: ROLE_ADMIN_FURNITURE, methods: [ GET,POST ] }
        - { path: ^/admin/furniture/new, roles: ROLE_ADMIN_FURNITURE, methods: [ GET,POST ] }
        - { path: ^/admin/service/edit, roles: ROLE_ADMIN_SERVICE, methods: [ GET,POST ] }
        - { path: ^/admin/service/new, roles: ROLE_ADMIN_SERVICE, methods: [ GET,POST ] }
        - { path: ^/admin/user/$, roles: ROLE_ADMIN, methods: [ GET ] }
        - { path: ^/admin/supporter/remove, roles: ROLE_ADMIN, methods: [ DELETE, POST ] }
        - { path: ^/admin/housing/remove, roles: ROLE_ADMIN, methods: [ DELETE, POST ] }
        - { path: ^/admin/furniture/remove, roles: ROLE_ADMIN, methods: [ DELETE, POST ] }
        - { path: ^/admin/service/remove, roles: ROLE_ADMIN, methods: [ DELETE, POST ] }
        - { path: ^/admin/user/remove, roles: ROLE_SUPER_ADMIN, methods: [ DELETE, POST ] }
        - { path: ^/admin/user/edit, roles: ROLE_EDIT_USER, methods: [ GET,POST ] }
        - { path: ^/admin/user/register, roles: ROLE_CREATE_USER, methods: [ GET,POST ] }
        - { path: ^/admin/profile/edit, roles: ROLE_GUEST, methods: [ GET,POST ] }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
